body {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    padding: 60px;
}

/*  [ Extend의 문제 ]
    - Extend로 많은 코드를 재사용하고 있지만, 아직 중복 코드가 존재함
    - 각 component에 다른 색상을 적용하기 위한 `background-color`가 중복되고 있음
    - Extend는 단순히 코드를 다른 곳에 붙여넣기 때문에 커스텀 코드는 대응할 수 없음
    
    [ Mixin ]
    - Mixin은 코드를 붙여넣는 동시에 생성할 수 있음
    - `@mixin` 키워드로 함수처럼 정의하고 사용
    - parameter에서 변수를 받을 수 있음 -> scss의 변수 문법 $name 적용
*/

/*  [ mixin 정의 ]
    - extend에서는 %name
    - mixin에서는 `@mixin` 키워드와 `alert($param)`
        - `$param` : 변수와 같은 문법
        - 함수의 parameter처럼 값을 외부로부터 받는 역할
*/
@mixin alert($bgColor, $borderColor) {
    background-color: $bgColor;
    margin:10px;
    padding:10px 20px;
    border-radius: 10px;
    border: 1px dashed $borderColor;

    /*  [ Add more content in mixin ]
        - mixin에 argument 대신 추가 content나 custom css를 전달할 수 있음
        - `@mixin`을 선언할 때 content가 추가될 부분을 `@content;` 키워드로 표시
        - `@include`로 호출할 때 `{ }` 안에 추가 css 작성
        - scss -> css 컴파일 될 때 추가 css 코드가 `@content;` 부분에 삽입됨
    */
    @content;
}
.success {
    /*  [ mixin 사용 ]
        - extend에서는 `@extend`로 호출
        - mixin에서는 `@include`로 호출
        - 함수처럼 parameter를 전달할 수 있다
    */
    // @extend %alert;
    // background-color: green;
    @include alert(green, blue) {
        font-size: 12px;
    }
}
.error {
    @include alert(tomato, white) {
        text-decoration: underline;
    }
}
.warning {
    @include alert(yellow, black) {
        text-transform: uppercase;
    }
}